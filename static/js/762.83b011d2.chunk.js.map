{"version":3,"file":"static/js/762.83b011d2.chunk.js","mappings":"kTAEaA,EAAWC,EAAAA,EAAAA,GAAH,iGCARC,EAAOD,EAAAA,EAAAA,GAAH,mHAOJE,EAAeF,EAAAA,EAAAA,IAAH,yC,SCoBzB,EAzBiB,SAAC,GAAuC,IAArCG,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACtC,OACE,UAACJ,EAAD,YACE,SAACC,EAAD,UACGC,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAKH,EACLI,MAAM,SAGR,gBACEF,IAAI,+EACJE,MAAM,MACND,IAAKH,OAKX,6BAAKA,MACL,uCAAeC,OAGpB,EC0CD,EA5Da,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAwCN,EAAAA,EAAAA,UAAS,IAAjD,eAAOO,EAAP,KAAqBC,EAArB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAGSK,EAAAA,EAAAA,IAAaR,GAHtB,OAGRS,EAHQ,OAKdV,EACEU,EAASX,KAAKY,KAAI,kBAA4C,CAC5DnB,aADgB,EAAGA,aAEnBC,KAFgB,EAAiBA,KAGjCC,UAHgB,EAAuBA,UAIvCkB,GAJgB,EAAkCA,GAAlC,KANN,gDAcdN,EAAgB,KAAMO,SAdR,yBAgBdT,GAAa,GAhBC,4EAAH,qDAoBfI,GACD,GAAE,CAACP,KAGF,gCACGE,IACC,SAAC,KAAD,CACEW,OAAO,KACPjB,MAAM,KACNkB,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGZpB,EAAKqB,OAAS,IACb,SAAChC,EAAD,UACGW,EAAKY,KAAI,gBAAGnB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWkB,EAAlC,EAAkCA,GAAlC,OACR,SAAC,EAAD,CAEEpB,aAAcA,EACdC,KAAMA,EACNC,UAAWA,GAHNkB,EAFC,MAUbP,IAAgB,SAAC,IAAD,MAGtB,C,6WCjEKgB,EAAU,mCAGVC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAHe,iCAMXC,EAAS,CAAEC,OAAQ,CAAEC,QAASN,IAEvBO,EAAkB,mCAAG,oGACTN,EAAS,sBAAuBG,GADvB,cAC1Bf,EAD0B,yBAEzBA,GAFyB,2CAAH,qDAKlBmB,EAAY,mCAAG,WAAMjB,GAAN,uFACHU,EAAS,UAAD,OAAWV,GAAMa,GADtB,cACpBf,EADoB,yBAEnBA,EAASoB,MAFU,2CAAH,sDAMZrB,EAAY,mCAAG,WAAMG,GAAN,uFACHU,EAAS,UAAD,OAAWV,EAAX,YAAyBa,GAD9B,cACpBf,EADoB,yBAEnBA,EAASoB,MAFU,2CAAH,sDAWZC,EAAe,mCAAG,WAAMnB,GAAN,uFACNU,EAAS,UAAD,OAAWV,EAAX,YAAyBa,GAD3B,cACvBf,EADuB,yBAEtBA,EAASoB,KAAKE,SAFQ,2CAAH,sDAKfC,EAAW,mCAAG,WAAMC,GAAN,gFACnBC,EAAe,CAAET,OAAQ,CAAEC,QAASN,EAASa,MAAOA,IADjC,SAEFZ,EAAS,gBAAiBa,GAFxB,cAEnBzB,EAFmB,yBAGlBA,GAHkB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/CastItem/CastItem.styled.jsx","components/CastItem/CastItem.jsx","components/Cast/Cast.jsx","services/movieAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n\n  flex-basis: calc((100% - 7 * 15px) / 8);\n`;\n\nexport const ImageWrapper = styled.div`\n  flex-grow: 1;\n`;\n","import React from 'react';\nimport { Item, ImageWrapper } from './CastItem.styled';\nimport PropTypes from 'prop-types';\n\nconst CastItem = ({ profile_path, name, character }) => {\n  return (\n    <Item>\n      <ImageWrapper>\n        {profile_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n            alt={name}\n            width=\"150\"\n          />\n        ) : (\n          <img\n            src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n            width=\"150\"\n            alt={name}\n          ></img>\n        )}\n      </ImageWrapper>\n\n      <p> {name}</p>\n      <p>Character: {character}</p>\n    </Item>\n  );\n};\n\nexport default CastItem;\n\nCastItem.propTypes = {\n  profile_path: PropTypes.string,\n  name: PropTypes.string,\n  character: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services';\nimport { Bars } from 'react-loader-spinner';\nimport Error from 'components/Error';\nimport { CastList } from './Cast.styled';\n\nimport CastItem from '../CastItem';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setIsLoading(true);\n      try {\n        const response = await getMovieCast(movieId);\n\n        setCast(\n          response.cast.map(({ profile_path, name, character, id }) => ({\n            profile_path,\n            name,\n            character,\n            id,\n          }))\n        );\n      } catch (error) {\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <Bars\n          height=\"40\"\n          width=\"40\"\n          color=\"#280232\"\n          ariaLabel=\"bars-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {cast.length > 0 && (\n        <CastList>\n          {cast.map(({ profile_path, name, character, id }) => (\n            <CastItem\n              key={id}\n              profile_path={profile_path}\n              name={name}\n              character={character}\n            />\n          ))}\n        </CastList>\n      )}\n      {errorMessage && <Error />}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '6251e629c61bceaf56a3d45f05637256';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst movieApi = axios.create({\n  baseURL: BASE_URL,\n});\n\nconst config = { params: { api_key: API_KEY } };\n\nexport const fetchTrendingMovie = async () => {\n  const response = await movieApi('/trending/movie/day', config);\n  return response;\n};\n\nexport const getMovieById = async id => {\n  const response = await movieApi(`/movie/${id}`, config);\n  return response.data;\n};\n\n// Функція отримання даних про акторський склад\nexport const getMovieCast = async id => {\n  const response = await movieApi(`/movie/${id}/credits`, config);\n  return response.data;\n};\n// Треба такі дані для картки акторів\n// profile_path;\n// character;\n// name;\n// =============================================\n\n// Функція отримання даних Reviews\nexport const getMovieReviews = async id => {\n  const response = await movieApi(`/movie/${id}/reviews`, config);\n  return response.data.results;\n};\n\nexport const searchMovie = async query => {\n  const searchConfig = { params: { api_key: API_KEY, query: query } };\n  const response = await movieApi('/search/movie', searchConfig);\n  return response;\n};\n\n// МАСИВ ЖАНРІВ ПОДУМАТИ ЯК ВИКОРИСТАТИ І КУДИ ВНЕСТИ ДАНІ\n// https://api.themoviedb.org/3/genre/movie/list?api_key=6251e629c61bceaf56a3d45f05637256\n\n// genres;\n// vote_average;\n// overview;\n// original_title;\n// poster_path;\n\n// /movie/{movie_id}/credits\n\n// /movie/{movie_id}/reviews\n"],"names":["CastList","styled","Item","ImageWrapper","profile_path","name","character","src","alt","width","useState","cast","setCast","movieId","useParams","isLoading","setIsLoading","errorMessage","setErrorMessage","useEffect","fetchCast","getMovieCast","response","map","id","message","height","color","ariaLabel","wrapperStyle","wrapperClass","visible","length","API_KEY","movieApi","axios","baseURL","config","params","api_key","fetchTrendingMovie","getMovieById","data","getMovieReviews","results","searchMovie","query","searchConfig"],"sourceRoot":""}